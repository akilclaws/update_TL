Install - pip install pyaudio

Connect USB & check lsusb
(or)
arecord -l ----> to get the device









Write publisher node

import rclpy
from rclpy.node import Node
import pyaudio
import numpy as np
from std_msgs.msg import Float32MultiArray

class AudioPublisher(Node):
	def __init__(self):
    	super().__init__('audio_publisher')

    	# Define recording parameters
    	self.FORMAT = pyaudio.paInt16
    	self.CHANNELS = 1
    	self.RATE = 44100  # Sample rate
    	self.CHUNK = 4096  # Buffer size

    	# Initialize PyAudio
    	self.audio = pyaudio.PyAudio()

    	# Find device index for "OSM09"
    	device_index = None
    	for i in range(self.audio.get_device_count()):
        	dev_info = self.audio.get_device_info_by_index(i)
        	if "OSM09" in dev_info["name"]:  # Match device name
            	device_index = i
            	break

    	if device_index is None:
        	self.get_logger().warn("OSM09 device not found. Using default input device.")
        	device_index = self.audio.get_default_input_device_info()["index"]

    	self.get_logger().info(f"Using device index: {device_index}")

    	# Open audio stream
    	self.stream = self.audio.open(
        	format=self.FORMAT,
        	channels=self.CHANNELS,
        	rate=self.RATE,
        	input=True,
        	frames_per_buffer=self.CHUNK,
        	input_device_index=device_index
    	)

    	# ROS 2 Publisher
    	self.publisher_ = self.create_publisher(Float32MultiArray, 'audio_data', 10)

    	# Create a timer to continuously publish audio
    	self.timer = self.create_timer(0.01, self.publish_audio)

	def publish_audio(self):
    	data = self.stream.read(self.CHUNK, exception_on_overflow=False)
    	np_data = np.frombuffer(data, dtype=np.int16)  # Convert to NumPy array
    	msg = Float32MultiArray()
    	msg.data = np_data.astype(np.float32).tolist()  # Convert to float for compatibility
    	self.publisher_.publish(msg)
    	self.get_logger().info("Publishing audio data...")

	def destroy_node(self):
    	self.stream.stop_stream()
    	self.stream.close()
    	self.audio.terminate()
    	super().destroy_node()

def main(args=None):
	rclpy.init(args=args)
	node = AudioPublisher()
	try:
    	rclpy.spin(node)
	except KeyboardInterrupt:
    	node.get_logger().info("Shutting down Audio Publisher")
	finally:
    	node.destroy_node()
    	rclpy.shutdown()

if __name__ == '__main__':
	main()













Node name = "audio_publisher"
Topic name = /audio_data

% part of code
self.FORMAT = pyaudio.paInt16
self.CHANNELS = 1
self.RATE = 44100  # Sample rate
self.CHUNK = 4096  # Buffer size

FORMAT = pyaudio.paInt16: Captures audio in 16-bit integer format.
CHANNELS = 1: Uses mono audio (one channel).
RATE = 44100: Sample rate of 44.1 kHz (CD quality).
CHUNK = 4096: Buffer size for reading data in chunks. (change these values as 124,256,1024,4096, etc…
self.audio = pyaudio.PyAudio()

device_index = None for i in range(self.audio.get_device_count()): dev_info = self.audio.get_device_info_by_index(i) if "OSM09" in dev_info["name"]: # Match device name device_index = i break

if device_index is None: self.get_logger().warn("OSM09 device not found. Using default input device.") device_index = self.audio.get_default_input_device_info()["index"]

Publisher code will check for available devices and write data in 
Bus 003 Device 013: ID 1b3f:2008 Generalplus Technology Inc. OSM09























Write subscriber node

import rclpy
from rclpy.node import Node
import numpy as np
import simpleaudio as sa
from std_msgs.msg import Float32MultiArray

class AudioSubscriber(Node):
	def __init__(self):
    	super().__init__('audio_subscriber')

    	self.subscription = self.create_subscription(
        	Float32MultiArray,
        	'audio_data',
        	self.audio_callback,
        	10
    	)
    	self.get_logger().info("Audio Subscriber started...")

	def audio_callback(self, msg):
    	np_data = np.array(msg.data, dtype=np.int16)  # Convert back to int16
    	play_obj = sa.play_buffer(np_data, 1, 2, 44100)
    	play_obj.wait_done()

def main(args=None):
	rclpy.init(args=args)
	node = AudioSubscriber()
	try:
    	rclpy.spin(node)
	except KeyboardInterrupt:
    	node.get_logger().info("Shutting down Audio Subscriber")
	finally:
    	node.destroy_node()
    	rclpy.shutdown()

if __name__ == '__main__':
	main()















Node name = “audio_subscriber”

Set the default speaker in the jetson nano GUI

Then,
In Setup.py file 

from setuptools import setup

package_name = 'audio'

setup(
	name=package_name,
	version='0.1.0',
	packages=[package_name],
	install_requires=['setuptools', 'pyaudio'],
	zip_safe=True,
	maintainer='your_name',
	maintainer_email='your_email@example.com',
	description='ROS 2 package for streaming audio from microphone to speaker',
	license='Apache License 2.0',
	tests_require=['pytest'],
	entry_points={
    	'console_scripts': [
        	'audio_publisher = audio.audio_publisher:main',
	'audio_publisher = audio.audio_subscriber:main',
    	],
	},
)

